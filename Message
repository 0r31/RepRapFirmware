GCodes.ino:  lastTime = platform->Time();
GCodes.ino:  platform->Message(HOST_MESSAGE, "GCode: ");
GCodes.ino:  platform->Message(HOST_MESSAGE, gcodeBuffer);
GCodes.ino:  platform->Message(HOST_MESSAGE, "<br>\n");
GCodes.ino:      platform->Message(HOST_MESSAGE, "GCodes: G Code buffer length overflow.");
Heat.ino:  lastTime = platform->Time();
Heat.ino:   unsigned long t = platform->Time();
Heat.ino:     //Serial.print(platform->getTemperature(0));
Heat.ino:     //Serial.println(platform->getTemperature(1));
Heat.ino:   platform->setHeater(0, frac);
Heat.ino:   platform->setHeater(1, 1 - frac);
Move.ino:  lastTime = platform->Time();
Move.ino:  platform->SetDirection(X_AXIS, FORWARDS);
Move.ino:  platform->SetDirection(Y_AXIS, FORWARDS);
Move.ino:  platform->SetDirection(Z_AXIS, FORWARDS);
Move.ino:  platform->SetDirection(3, FORWARDS);
Move.ino:   unsigned long t = platform->Time();
Move.ino:/*  platform->step(X_AXIS);
Move.ino:   platform->step(Y_AXIS);
Move.ino:   platform->step(Z_AXIS);
Move.ino:   platform->step(3);
RepRapFirmware.ino:  platform->Init();
RepRapFirmware.ino:  platform->Message(HOST_MESSAGE, "RepRapPro RepRap Firmware (Re)Started<br>\n");
RepRapFirmware.ino:  platform->Exit();  
RepRapFirmware.ino:  platform->Spin();
Webserver.ino:      platform->Write(postFile, postBoundary[i]);
Webserver.ino:    platform->Write(postFile, c);
Webserver.ino:    platform->Message(HOST_MESSAGE, "Webserver: GCode buffer overflow.<br>\n");
Webserver.ino:    if(!platform->DeleteFile(&gcodeBuffer[4]))
Webserver.ino:      platform->Message(HOST_MESSAGE, "Unsuccsessful attempt to delete: ");
Webserver.ino:      platform->Message(HOST_MESSAGE, &gcodeBuffer[4]);
Webserver.ino:      platform->Message(HOST_MESSAGE, "<br>\n");
Webserver.ino:  clientCloseTime = platform->Time();
Webserver.ino:  platform->SendToClient("HTTP/1.1 200 OK\n");
Webserver.ino:    platform->SendToClient("Content-Type: image/png\n");
Webserver.ino:    platform->SendToClient("Content-Type: text/html\n");
Webserver.ino:  platform->SendToClient("Connnection: close\n");
Webserver.ino://           platform->SendToHost("Cache-Control: max-age=3600\n");
Webserver.ino:  platform->SendToClient('\n');
Webserver.ino:  fileBeingSent = platform->OpenFile(platform->PrependRoot(platform->GetWebDir(), nameOfFileToSend), false);
Webserver.ino:    fileBeingSent = platform->OpenFile(platform->PrependRoot(platform->GetWebDir(), nameOfFileToSend), false);
Webserver.ino:    if(platform->Read(fileBeingSent, b))
Webserver.ino:      platform->SendToClient(b);
Webserver.ino:      platform->Close(fileBeingSent);    
Webserver.ino:    platform->Message(HOST_MESSAGE, "HTTP request: ");
Webserver.ino:    platform->Message(HOST_MESSAGE, clientLine);
Webserver.ino:    platform->Message(HOST_MESSAGE, "<br>\n");
Webserver.ino:      platform->Message(HOST_MESSAGE, "Post boundary buffer overflow.<br>\n");
Webserver.ino:      platform->Message(HOST_MESSAGE, "Post disposition gives no filename.<br>\n");
Webserver.ino:        platform->Message(HOST_MESSAGE, "Post filename buffer overflow.<br>\n");
Webserver.ino:      platform->Message(HOST_MESSAGE, "Webserver: buffer not free!<br>\n");
Webserver.ino:    postFile = platform->OpenFile(platform->PrependRoot(platform->GetGcodeDir(), postFileName), true);
Webserver.ino:      platform->Message(HOST_MESSAGE, "Can't open file for write or no post boundary: ");
Webserver.ino:      platform->Message(HOST_MESSAGE, platform->PrependRoot(platform->GetGcodeDir(), postFileName));
Webserver.ino:      platform->Message(HOST_MESSAGE, "<br>\n");
Webserver.ino:      platform->Message(HOST_MESSAGE,"Client read buffer overflow.<br>\n");
Webserver.ino:  if(platform->ClientStatus() & CONNECTED)
Webserver.ino:    if(platform->ClientStatus() & AVAILABLE) 
Webserver.ino:      char c = platform->ClientRead();
Webserver.ino:          platform->Close(postFile);
Webserver.ino:  if (platform->ClientStatus() & CLIENT) 
Webserver.ino:      if(platform->Time() - clientCloseTime < CLIENT_CLOSE_DELAY)
Webserver.ino:      platform->DisconnectClient();
Webserver.ino:  platform->Message(HOST_MESSAGE, "callPHPBoolean(): non-existent function - ");
Webserver.ino:  platform->Message(HOST_MESSAGE, phpRecord);
Webserver.ino:  platform->Message(HOST_MESSAGE, "<br>\n");
Webserver.ino:  platform->SendToClient(platform->FileList(platform->GetGcodeDir()));
Webserver.ino:    platform->SendToClient(myName);
Webserver.ino:    platform->SendToClient("<meta http-equiv=\"REFRESH\" content=\"0;url=");
Webserver.ino:    platform->SendToClient(PASSWORD_PAGE);
Webserver.ino:    platform->SendToClient("\"></HEAD>");
Webserver.ino:  platform->Message(HOST_MESSAGE, "callPHPString(): non-existent function - ");
Webserver.ino:  platform->Message(HOST_MESSAGE, phpRecord);
Webserver.ino:  platform->Message(HOST_MESSAGE, "<br>\n"); 
Webserver.ino:      platform->Message(HOST_MESSAGE, "ProcessPHPByte: PHP record buffer overflow.<br>\n");
Webserver.ino:         platform->SendToClient(b);
Webserver.ino:      platform->Message(HOST_MESSAGE, "ProcessPHPByte: PHP buffer overflow: ");
Webserver.ino:      platform->Message(HOST_MESSAGE, phpTag);
Webserver.ino:      platform->Message(HOST_MESSAGE, "<br>\n");
Webserver.ino:      platform->SendToClient(phpTag); 
Webserver.ino:      platform->SendToClient(phpTag); 
Webserver.ino:      platform->SendToClient(phpTag); 
Webserver.ino:      platform->SendToClient(phpTag); 
Webserver.ino:      platform->SendToClient(phpTag); 
Webserver.ino:     platform->Message(HOST_MESSAGE, "ProcessPHPByte: PHP tag runout.<br>\n");
Webserver.ino:     platform->SendToClient(b);
Webserver.ino:    if(platform->Read(fileBeingSent, b))
Webserver.ino:      platform->Close(fileBeingSent);
Webserver.ino:  lastTime = platform->Time();
